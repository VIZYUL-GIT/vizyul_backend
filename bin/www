#! /usr/bin/env node

const app = require('../server').app;
const debug = require('debug')('vizyul:server');
const http = require('http');
const cluster = require('cluster');
const numCPUs = require('os').cpus().length;

const CONCURRENCY = process.env.WEB_CONCURRENCY || numCPUs;

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  const p = parseInt(val, 10);

  if (Number.isNaN(p)) {
    // named pipe
    return val;
  }

  if (p >= 0) {
    // port number
    return p;
  }

  return false;
}

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

if (cluster.isMaster) {
  console.log(`Master ${process.id || 'process'} is running`);

  // Fork workers.
  for (let i = 0; i < CONCURRENCY; i += 1) {
    cluster.fork();
  }

  cluster.on('online', (worker) => {
    console.log(`Worker ${worker.id} is online and ready.`);
  });

  cluster.on('exit', (worker, code) => {
    console.log(`Worker ${worker.id} died with code ${code}. RIP in peace.`);

    // You can maintain a constant number of workers by forking when a worker exits
    cluster.fork();
  });
} else {
  // Create HTTP server.
  const server = http.createServer(app);

  // Listen on provided port, on all network interfaces.
  server.listen(port);
  server.on('error', onError);
  server.on('listening', () => {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? `pipe ${addr}`
      : `port ${addr.port}`;
    debug(`Listening on ${bind}`);
  });
}